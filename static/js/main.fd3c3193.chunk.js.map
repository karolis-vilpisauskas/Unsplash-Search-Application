{"version":3,"sources":["layout/Header/Header.js","layout/Footer/Footer.js","components/Button/Button.js","components/ListItem/ListItem.js","components/List/List.js","layout/Sidebar/Sidebar.js","components/Input/Input.js","components/GridItem/GridItem.js","components/Grid/Grid.js","layout/Content/Content.js","layout/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Footer","Button","type","label","action","onClick","ListItem","List","Sidebar","console","log","Input","setInput","name","onChange","GridItem","caption","src","url","alt","Grid","Content","Main","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ybAWeA,G,KARA,WACd,OACC,4BAAQC,UAAU,UACjB,wDCKYC,G,KARA,WACd,OACC,4BAAQD,UAAU,UACjB,gECSYE,G,kBAZA,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAK9B,OACC,4BAAQL,UAAU,SAASG,KAAMA,EAAMG,QALxB,WACfD,MAKED,KCCWG,G,YARE,WAChB,OACC,6BACC,4CCOYC,EARF,WACZ,OACC,6BACC,kBAAC,EAAD,QCWYC,EAbC,WACf,IAAMH,EAAU,WACfI,QAAQC,OAET,OACC,yBAAKX,UAAU,WACd,kBAAC,EAAD,CAAQG,KAAK,SAASE,OAAQC,EAASF,MAAM,WAC7C,kBAAC,EAAD,CAAQD,KAAK,SAASE,OAAQC,EAASF,MAAM,SAC7C,kBAAC,EAAD,QCDYQ,G,YAVD,SAAC,GAA8B,IAA5BT,EAA2B,EAA3BA,KAAMU,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,KAKhC,OACC,2BAAOd,UAAU,QAAQG,KAAMA,EAAMW,KAAMA,EAAMC,SALjC,WAChBF,SCMaG,G,YARE,SAAC,GAA+B,EAA7BC,QAA6B,EAApBC,IAAoB,EAAfC,IAAe,EAAVC,IACtC,OACC,6BACC,4CCOYC,EARF,WACZ,OACC,6BACC,kBAAC,EAAD,QCWYC,EAbC,WAKf,OACC,yBAAKtB,UAAU,WACd,kBAAC,EAAD,CAAOG,KAAK,OAAOW,KAAK,QAAQD,SANjB,WAChBH,QAAQC,IAAI,aAMX,kBAAC,EAAD,QCEYY,EAXF,WACZ,OACC,6BAASvB,UAAU,QAClB,yBAAKA,UAAU,aACd,kBAAC,EAAD,MACA,kBAAC,EAAD,SCKWwB,MAVf,WACC,OACC,yBAAKxB,UAAU,OACd,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEiByB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fd3c3193.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Header.scss\";\r\n\r\nconst Header = () => {\r\n\treturn (\r\n\t\t<header className='header'>\r\n\t\t\t<h3>Unsplash Image Search</h3>\r\n\t\t</header>\r\n\t);\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./Footer.scss\";\r\n\r\nconst Footer = () => {\r\n\treturn (\r\n\t\t<footer className='footer'>\r\n\t\t\t<h3>Â© 2019 All Rights Reserved</h3>\r\n\t\t</footer>\r\n\t);\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport \"./Button.scss\";\r\n\r\nconst Button = ({ type, label, action }) => {\r\n\tconst onClick = () => {\r\n\t\taction();\r\n\t};\r\n\r\n\treturn (\r\n\t\t<button className='button' type={type} onClick={onClick}>\r\n\t\t\t{label}\r\n\t\t</button>\r\n\t);\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport \"./ListItem.scss\";\r\n\r\nconst ListItem = () => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h1>List Item</h1>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ListItem;\r\n","import React from \"react\";\r\nimport \"./List.scss\";\r\n\r\nimport ListItem from \"../ListItem\";\r\n\r\nconst List = () => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<ListItem />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default List;\r\n","import React from \"react\";\r\nimport \"./Sidebar.scss\";\r\n\r\nimport Button from \"../../components/Button\";\r\nimport List from \"../../components/List\";\r\n\r\nconst Sidebar = () => {\r\n\tconst onClick = () => {\r\n\t\tconsole.log();\r\n\t};\r\n\treturn (\r\n\t\t<div className='sidebar'>\r\n\t\t\t<Button type='button' action={onClick} label='Search' />\r\n\t\t\t<Button type='button' action={onClick} label='Save' />\r\n\t\t\t<List />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\nimport \"./Input.scss\";\r\n\r\nconst Input = ({ type, setInput, name }) => {\r\n\tconst onChange = () => {\r\n\t\tsetInput();\r\n\t};\r\n\r\n\treturn (\r\n\t\t<input className='input' type={type} name={name} onChange={onChange} />\r\n\t);\r\n};\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\nimport \"./GridItem.scss\";\r\n\r\nconst GridItem = ({ caption, src, url, alt }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h1>Grid Item</h1>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default GridItem;\r\n","import React from \"react\";\r\nimport \"./Grid.scss\";\r\n\r\nimport GridItem from \"../GridItem\";\r\n\r\nconst Grid = () => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<GridItem />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Grid;\r\n","import React from \"react\";\r\nimport \"./Content.scss\";\r\n\r\nimport Input from \"../../components/Input\";\r\nimport Grid from \"../../components/Grid\";\r\n\r\nconst Content = () => {\r\n\tconst onChange = () => {\r\n\t\tconsole.log(\"worked\");\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className='content'>\r\n\t\t\t<Input type='text' name='query' setInput={onChange} />\r\n\t\t\t<Grid />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Content;\r\n","import React from \"react\";\r\nimport \"./Main.scss\";\r\nimport Sidebar from \"../Sidebar\";\r\nimport Content from \"../Content\";\r\n\r\nconst Main = () => {\r\n\treturn (\r\n\t\t<section className='main'>\r\n\t\t\t<div className='container'>\r\n\t\t\t\t<Content />\r\n\t\t\t\t<Sidebar />\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t);\r\n};\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport Header from \"./layout/Header\";\nimport Footer from \"./layout/Footer\";\nimport Main from \"./layout/Main\";\n\nfunction App() {\n\treturn (\n\t\t<div className='App'>\n\t\t\t<Header />\n\t\t\t<Main />\n\t\t\t<Footer />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './scss/base.scss'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}